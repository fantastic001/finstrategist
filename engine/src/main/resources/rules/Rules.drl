package rules

import com.stefan.model.*;
import java.time.LocalDate;

import java.util.Collection;

import com.stefan.main.Logger

global Logger logger;

rule "Create initial estimations with moving average"
    agenda-group "collect"
    when 
        Stock($name : ticker, $today : date, date == LocalDate.now(), $c1 : close, $d1 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(1), $c2 : close, $d2 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(2), $c3 : close, $d3 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(3), $c4 : close, $d4 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(4), $c5 : close, $d5 : dividend)
    then 
        logger.log("Creating estimate for " + $name);
        float mean = ($c1 + $c2 + $c3 + $c4 + $c5) / 5;
        float mean_dividend = ($d1 + $d2 + $d3 + $d4 + $d5) / 5;
        // float risk = ($c1*$c1 + $c2*$c2 + $c3*$c3 + $c4*$c4 + $c5*$c5) / 5 - mean * mean;
        float growth = $c1 / mean - 1;
        float risk = mean_dividend / $c1 + growth;
        insert(new Estimate($name, $today, risk,growth));
end


rule "Create initial estimations with linear yearly estimate"
    agenda-group "collect"
    when 
        Stock($name : ticker, $today : date, date == LocalDate.now(), $c1 : close)
        Stock(ticker == $name, date == LocalDate.now().minusDays(365), $c2 : close)
        accumulate(Stock(ticker == $name, eval(date.isAfter(LocalDate.now().minusDays(365))), $dividend : dividend, $close : close),
            $mean_dividend : average($dividend),
            $mean_price : average($close)
        )
    then 
        logger.log("Creating estimate for " + $name);
        double growth = ($c1 - $c2) / $c2 - 1;
        double risk = $mean_dividend / $mean_price - 1;
        insert(new Estimate($name, $today, (float) risk, (float) growth));
end