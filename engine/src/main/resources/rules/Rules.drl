package rules

import com.stefan.model.*;
import java.time.LocalDate;

import java.util.Collection;
import java.util.ArrayList;

import com.stefan.main.Logger

global Logger logger;

rule "If portfolio is not avalable in memory, create it"
    agenda-group "preprocess"
    when 
        not (exists Portfolio()) 
    then 
        logger.log("Creating empty portfolio");
        insert(new Portfolio(new ArrayList<>(), 0));
end

rule "if there is stock not present in portfolio (even with count = 0), add it"
    agenda-group "preprocess"
    when 
        $portfolio : Portfolio($assets : assets)
        Stock($name : ticker)
        not (exists PortfolioAsset(ticker == $name))
    then 
        logger.log("Adding stock " + $name + " to portfolio with count = 0");
        PortfolioAsset asset = new PortfolioAsset($name, 0);
        $portfolio.getAssets().add(asset);
        insert(asset);

end

rule "Create initial estimations with moving average"
    agenda-group "collect"
    when 
        Stock($name : ticker, $today : date, date == LocalDate.now(), $c1 : close, $d1 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(1), $c2 : close, $d2 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(2), $c3 : close, $d3 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(3), $c4 : close, $d4 : dividend)
        Stock(ticker == $name, date == LocalDate.now().minusDays(4), $c5 : close, $d5 : dividend)
    then 
        logger.log("Creating estimate for " + $name);
        float mean = ($c1 + $c2 + $c3 + $c4 + $c5) / 5;
        float mean_dividend = ($d1 + $d2 + $d3 + $d4 + $d5) / 5;
        // float risk = ($c1*$c1 + $c2*$c2 + $c3*$c3 + $c4*$c4 + $c5*$c5) / 5 - mean * mean;
        float growth = $c1 / mean - 1;
        float risk = mean_dividend / $c1 + growth;
        insert(new Estimate($name, $today, risk,growth));
end


rule "Create initial estimations with linear yearly estimate"
    agenda-group "collect"
    when 
        Stock($name : ticker, $today : date, date == LocalDate.now(), $c1 : close)
        Stock(ticker == $name, date == LocalDate.now().minusDays(365), $c2 : close)
        accumulate(Stock(ticker == $name, eval(date.isAfter(LocalDate.now().minusDays(365))), $dividend : dividend, $close : close),
            $mean_dividend : average($dividend),
            $mean_price : average($close)
        )
    then 
        logger.log("Creating estimate for " + $name);
        double growth = ($c1 - $c2) / $c2 - 1;
        double risk = $mean_dividend / $mean_price - 1;
        insert(new Estimate($name, $today, (float) risk, (float) growth));
end

rule "Create estimate based on earnings growth"

    agenda-group "collect"
    when 
        Stock($ticker : ticker, date == LocalDate.now(), $today : date)
        CompanyInfo(ticker == $ticker, date == LocalDate.now(), $revenue : totalRevenue)
        CompanyInfo(ticker == $ticker, date == LocalDate.now().minusDays(1), $revenueOld : totalRevenue)
        accumulate(CompanyInfo(ticker == $ticker, $r : totalRevenue),
            $mean_revenue : average($r)
        )
    then 
        insert(new Estimate($ticker, $today, (float) (($revenue - $revenueOld) / $revenueOld), (float) (($revenue - $mean_revenue) / $mean_revenue)));
    end


rule "Create estimate based on assets growth"

    agenda-group "collect"
    when 
        Stock($ticker : ticker, date == LocalDate.now(), $today : date)
        CompanyInfo(ticker == $ticker, date == LocalDate.now(), $revenue : assets)
        CompanyInfo(ticker == $ticker, date == LocalDate.now().minusDays(1), $revenueOld : assets)
        accumulate(CompanyInfo(ticker == $ticker, $r : assets),
            $mean_revenue : average($r)
        )
    then 
        insert(new Estimate($ticker, $today, (float) (($revenue - $revenueOld) / $revenueOld), (float) (($revenue - $mean_revenue) / $mean_revenue)));
    end


rule "Create estimate based on earnings over share"

    agenda-group "collect"
    when 
        Stock($ticker : ticker, date == LocalDate.now(), $close : close, $today : date)
        CompanyInfo(ticker == $ticker, date == LocalDate.now(), $revenue : totalRevenue)
        CompanyInfo(ticker == $ticker, date == LocalDate.now().minusDays(1), $revenueOld : totalRevenue)
        accumulate(CompanyInfo(ticker == $ticker, $r : totalRevenue),
            $mean_revenue : average($r / $close)
        )
    then 
        insert(new Estimate($ticker, $today, (float) (($revenue/$close - $revenueOld/$close) / $revenueOld/$close), (float) (($revenue/$close - $mean_revenue) / $mean_revenue / $close)));
    end

rule "If there is recommendation for buying, decrease risk"
    agenda-group "collect"
    no-loop
    when 
        $estimate : Estimate($ticker : ticker, $risk : risk)
        Recommendation(ticker == $ticker, date == LocalDate.now(), action == "BUY")
    then 
        modify($estimate) {
            setRisk((float) 0.9*$risk)
        }
    end


rule "If dividend yield is between 3% and 5%, decrease risk estimate"
    agenda-group "collect"
    no-loop
    when 
        $estimate : Estimate($ticker : ticker, $risk : risk)
        Stock(ticker == $ticker, date == LocalDate.now(), $dividend : dividend, $close : close,
            $dividend / $close > 0.03,  $dividend / $close < 0.05
        )
    then 
        modify($estimate) {
            setRisk((float)0.9*$risk)
        }
    end

rule "If dividend yield is above 5%, decrease risk estimate"
    agenda-group "collect"
    no-loop
    when 
        $estimate : Estimate($ticker : ticker, $risk : risk)
        Stock(ticker == $ticker, date == LocalDate.now(), $dividend : dividend, $close : close,
            $dividend / $close > 0.05
        )
    then 
        modify($estimate) {
            setRisk((float) 0.6*$risk)
        }
    end


rule "If there is no prepared decision for given stock and given day but there is estimation, initial create decision"
    agenda-group "estimate"
    when 
        Stock($name : ticker, date == LocalDate.now())
        exists Estimate(ticker == $name, date == LocalDate.now())
        not (exists Decision(ticker == $name, date == LocalDate.now()))
    then 
        logger.log("Creating empty decision for " + $name);
        insert(new Decision($name, LocalDate.now(), 0, null));
end



// Decision making

rule "Decision making"
    agenda-group "decide"
    when 
        Stock($name : ticker, date == LocalDate.now())
        $decision : Decision(ticker == $name, date == LocalDate.now(), action == null)
        accumulate(Estimate(ticker == $name, date == LocalDate.now(), $g : growth, $r : risk),
            $expected_growth : average($g),
            $expected_risk : average($r)
        )
    then 
        logger.log("Found undecided estimation");
        
end


// Portfolio decision 

rule "Portfolio decisions - buying with enough cash"
    agenda-group "portfolio"
    when 
        Decision($name : ticker, date == LocalDate.now(), action == Action.BUY, $count : count)
        Stock(ticker == $name, date == LocalDate.now(), $price : close)
        $portfolio : Portfolio(cash >= $price * $count, $cash : cash )
        $asset : PortfolioAsset(ticker == $name, $asset_count : count)
    then 
        modify ($asset) {
            setCount($asset_count + $count)
        }
        modify ($portfolio) {
            setCash($cash - $price * $count)
        }
end 


rule "Portfolio decisions - buying without enough cash"
    agenda-group "portfolio"
    when 
        $decision : Decision($name : ticker, date == LocalDate.now(), action == Action.BUY, $count : count)
        Stock(ticker == $name, date == LocalDate.now(), $price : close)
        $portfolio : Portfolio(cash < $price * $count, $cash : cash )
        $asset : PortfolioAsset(ticker == $name, $asset_count : count)
    then 
        int newCount = (int) ($cash / $price);
        modify ($decision) {
            setCount(newCount)
        }
        modify ($asset) {
            setCount($asset_count + newCount)
        }
        modify ($portfolio) {
            setCash($cash - $price * newCount)
        }
end 


rule "Portfolio decisions - selling existing assets"
    agenda-group "portfolio"
    when 
        Decision($name : ticker, date == LocalDate.now(), action == Action.SELL, $count : count)
        Stock(ticker == $name, date == LocalDate.now(), $price : close)
        $portfolio : Portfolio($cash : cash)
        $asset : PortfolioAsset(ticker == $name, $asset_count : count, count >= $count)
    then 
        modify ($asset) {
            setCount($asset_count - $count)
        }
        modify ($portfolio) {
            setCash($cash + $price * $count)
        }
end 

rule "Portfolio decisions - selling non-existing assets"
    agenda-group "portfolio"
    when 
        Decision($name : ticker, date == LocalDate.now(), action == Action.SELL, $count : count)
        Stock(ticker == $name, date == LocalDate.now(), $price : close)
        $portfolio : Portfolio($cash : cash)
        $asset : PortfolioAsset(ticker == $name, $asset_count : count, count < $count)
    then 
        modify ($asset) {
            setCount(0)
        }
        modify ($portfolio) {
            setCash($cash + $price * $asset_count)
        }
end 